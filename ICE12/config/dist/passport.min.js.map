{"version":3,"sources":["passport.js"],"names":["bcrypt","require","passport","Strategy","connection","User","saltRounds","findById","then","user","done","id","deserializeUser","err","usernameField","use","LocalStrategy","username","password","hashedPassword","compare","hashPassword","isMatch","message","newUser","hashSync","module","exports"],"mappings":"aAAA,IAAMA,OAASC,QAAQ,UACjBC,SAAWD,QAAQ,YADnBD,cAAiBC,QAAvB,kBAAAE,SAGMC,WAAaH,QAAQ,cAFrBC,KAAQE,WAAWC,KAInBC,WAAa,GA0BfD,SAAKE,cAAaC,SAAlBC,EAAuBC,GACnBA,EAAK,KAAMD,EAAXE,MAGHT,SAJDU,gBAAA,SAAAD,EAAAD,GAOJL,KAAAE,SAAAI,GAAAH,KAAA,SAAAC,GANQC,EAAK,KAAMD,KAMnB,MAEI,SAAAI,GACEC,EAAAA,EAAe,UAILZ,SAAAa,IACA,IAAIC,cACA,CAAAF,cAAgB,YAAWG,SAAAA,EAAAA,EAAAA,GAAUC,KAAAA,QAAAA,CAAAA,SAAAA,IACrCV,KAAA,SAAAC,GACMU,GAAAA,EAeYnB,OAAVoB,QAAAF,EAAAT,EAAAY,aAAA,SAAAR,EAAAS,GAKG,OAJNT,GADGH,EAAKG,EAAK,MAKPS,EACsBZ,EAAA,KAAAD,GAAzBC,EAAA,MAAA,EAAA,CAAAa,QAAA,kCArBevB,CAFvB,IAAMwB,EAAU,IAAInB,KAAK,CAAEY,SAAAA,EAAUC,SAAAA,IAKjCC,EAAAnB,OAAAyB,SAAAD,EAAAN,SAAAZ,YAGeE,IAENgB,EAAAX,SAAOM,EACwBN,EAAAA,OAAAA,KAAAA,SAAAA,GAApC,OAAAH,EAAA,KAAAD,KAAoCI,MAHxC,SAAAA,GAKH,OAAAH,EAAA,MAAA,EAAA,CAAAa,QAAAV,UAboCK,MA6B7B,SAAAL,GAAwBA,OAAAA,EAAAA,MAAAA,EAAAA,CAAAA,QAAAA,SAMpDa,OAAOC,QAAUzB","file":"passport.min.js","sourcesContent":["const bcrypt = require('bcrypt');\r\nconst passport = require('passport');\r\nconst LocalStrategy = require('passport-local').Strategy;\r\nconst connection = require('./database');\r\nconst User = connection.User;\r\nconst saltRounds = 12;\r\n\r\n// Strategies are responsible for authenticating requests by implementing an authentication mechanism that defines how to encode a credential, such as a password or an assertion from an identity provider (IdP), in a request.\r\n\r\n// We are using a username and password strategy that requires a callback that will check if the user exists and if the password is valid and return true or false\r\n\r\n// this uses the req.body.username and password from logging in to find a user and see if the user is valid - authentication\r\n\r\n//this is what will trigger a failed login\r\n// trigger successful login\r\n// trigger failed login\r\n\r\n//LocalStrategy is a passport.js strategy that allows you to authenticate users based on a username and password. It is used to verify user credentials by checking if the username and password are valid.\r\n\r\n// In Passport.js, serializeUser and deserializeUser are two methods that are used to store and retrieve user data from a session. The serializeUser method is used to determine which data of the user object should be stored in the session.\r\n\r\n// The result of the serializeUser method is attached to the session as req.session.passport.user = { ~~ serialized user object }.\r\n\r\n// The deserializeUser method is used to retrieve the whole object from the session. It should return the full object to be attached to the request as req.user.\r\n\r\n\r\npassport.serializeUser((user, done) => {\r\n    done(null, user.id);\r\n});\r\n\r\npassport.deserializeUser((id, done) => {\r\n    User.findById(id).then(user => {\r\n        done(null, user);\r\n    }).catch(err => {\r\n        done(err, null);\r\n    });\r\n});\r\n\r\n// Local stratagy\r\npassport.use(\r\n    new LocalStrategy(\r\n    { usernameField: \"username\" }, \r\n    (username, password, done) => {\r\n        User.findOne({ username: username })\r\n            .then(user => {\r\n                // Create a new user\r\n                if (!user) {\r\n                    const newUser = new User({ username, password });\r\n                    // Hash password before saving in database\r\n                    const hashedPassword = bcrypt.hashSync(newUser.password, saltRounds);\r\n\r\n                    if (hashedPassword) {\r\n                        // reasign to user password\r\n                        newUser.password = hashedPassword;\r\n\r\n                        newUser.save().then(user => {\r\n                            return done(null, user);\r\n                        }).catch(err => {\r\n                            return done(null, false, { message: err });\r\n                        });\r\n                    }\r\n                } else {\r\n                    bcrypt.compare(password, user.hashPassword, (err, isMatch) => {\r\n                        if (err) {\r\n                            done(err, null)\r\n                        }\r\n\r\n                        if (isMatch) {\r\n                            return done(null, user);\r\n                        } else {\r\n                            return done(null, false, { message: \"Password was incorrect.\" })\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n            .catch(err => {\r\n                return done(null, false, { message: err });\r\n            });\r\n    }\r\n    )\r\n);\r\n\r\nmodule.exports = passport;"]}