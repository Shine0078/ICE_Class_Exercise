{"version":3,"sources":["passport.js"],"names":["bcrypt","require","passport","LocalStrategy","Strategy","connection","User","saltRounds","serializeUser","user","done","id","deserializeUser","findById","then","err","use","usernameField","username","password","findOne","newUser","hashedPassword","hashSync","save","message","compare","hashPassword","isMatch","module","exports"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,aAAa,GAAGF,OAAO,CAAC,gBAAD,CAAP,CAA0BG,QAAhD;;AACA,IAAMC,UAAU,GAAGJ,OAAO,CAAC,YAAD,CAA1B;;AACA,IAAMK,IAAI,GAAGD,UAAU,CAACC,IAAxB;AACA,IAAMC,UAAU,GAAG,EAAnB,C,CAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;;AAGAL,QAAQ,CAACM,aAAT,CAAuB,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACnCA,EAAAA,IAAI,CAAC,IAAD,EAAOD,IAAI,CAACE,EAAZ,CAAJ;AACH,CAFD;AAIAT,QAAQ,CAACU,eAAT,CAAyB,UAACD,EAAD,EAAKD,IAAL,EAAc;AACnCJ,EAAAA,IAAI,CAACO,QAAL,CAAcF,EAAd,EAAkBG,IAAlB,CAAuB,UAAAL,IAAI,EAAI;AAC3BC,IAAAA,IAAI,CAAC,IAAD,EAAOD,IAAP,CAAJ;AACH,GAFD,WAES,UAAAM,GAAG,EAAI;AACZL,IAAAA,IAAI,CAACK,GAAD,EAAM,IAAN,CAAJ;AACH,GAJD;AAKH,CAND,E,CAQA;;AACAb,QAAQ,CAACc,GAAT,CACI,IAAIb,aAAJ,CACA;AAAEc,EAAAA,aAAa,EAAE;AAAjB,CADA,EAEA,UAACC,QAAD,EAAWC,QAAX,EAAqBT,IAArB,EAA8B;AAC1BJ,EAAAA,IAAI,CAACc,OAAL,CAAa;AAAEF,IAAAA,QAAQ,EAAEA;AAAZ,GAAb,EACKJ,IADL,CACU,UAAAL,IAAI,EAAI;AACV;AACA,QAAI,CAACA,IAAL,EAAW;AACP,UAAMY,OAAO,GAAG,IAAIf,IAAJ,CAAS;AAAEY,QAAAA,QAAQ,EAARA,QAAF;AAAYC,QAAAA,QAAQ,EAARA;AAAZ,OAAT,CAAhB,CADO,CAEP;;AACA,UAAMG,cAAc,GAAGtB,MAAM,CAACuB,QAAP,CAAgBF,OAAO,CAACF,QAAxB,EAAkCZ,UAAlC,CAAvB;;AAEA,UAAIe,cAAJ,EAAoB;AAChB;AACAD,QAAAA,OAAO,CAACF,QAAR,GAAmBG,cAAnB;AAEAD,QAAAA,OAAO,CAACG,IAAR,GAAeV,IAAf,CAAoB,UAAAL,IAAI,EAAI;AACxB,iBAAOC,IAAI,CAAC,IAAD,EAAOD,IAAP,CAAX;AACH,SAFD,WAES,UAAAM,GAAG,EAAI;AACZ,iBAAOL,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEe,YAAAA,OAAO,EAAEV;AAAX,WAAd,CAAX;AACH,SAJD;AAKH;AACJ,KAfD,MAeO;AACHf,MAAAA,MAAM,CAAC0B,OAAP,CAAeP,QAAf,EAAyBV,IAAI,CAACkB,YAA9B,EAA4C,UAACZ,GAAD,EAAMa,OAAN,EAAkB;AAC1D,YAAIb,GAAJ,EAAS;AACLL,UAAAA,IAAI,CAACK,GAAD,EAAM,IAAN,CAAJ;AACH;;AAED,YAAIa,OAAJ,EAAa;AACT,iBAAOlB,IAAI,CAAC,IAAD,EAAOD,IAAP,CAAX;AACH,SAFD,MAEO;AACH,iBAAOC,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEe,YAAAA,OAAO,EAAE;AAAX,WAAd,CAAX;AACH;AACJ,OAVD;AAWH;AACJ,GA/BL,WAgCW,UAAAV,GAAG,EAAI;AACV,WAAOL,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEe,MAAAA,OAAO,EAAEV;AAAX,KAAd,CAAX;AACH,GAlCL;AAmCH,CAtCD,CADJ;AA2CAc,MAAM,CAACC,OAAP,GAAiB5B,QAAjB","sourcesContent":["const bcrypt = require('bcrypt');\r\nconst passport = require('passport');\r\nconst LocalStrategy = require('passport-local').Strategy;\r\nconst connection = require('./database');\r\nconst User = connection.User;\r\nconst saltRounds = 12;\r\n\r\n// Strategies are responsible for authenticating requests by implementing an authentication mechanism that defines how to encode a credential, such as a password or an assertion from an identity provider (IdP), in a request.\r\n\r\n// We are using a username and password strategy that requires a callback that will check if the user exists and if the password is valid and return true or false\r\n\r\n// this uses the req.body.username and password from logging in to find a user and see if the user is valid - authentication\r\n\r\n//this is what will trigger a failed login\r\n// trigger successful login\r\n// trigger failed login\r\n\r\n//LocalStrategy is a passport.js strategy that allows you to authenticate users based on a username and password. It is used to verify user credentials by checking if the username and password are valid.\r\n\r\n// In Passport.js, serializeUser and deserializeUser are two methods that are used to store and retrieve user data from a session. The serializeUser method is used to determine which data of the user object should be stored in the session.\r\n\r\n// The result of the serializeUser method is attached to the session as req.session.passport.user = { ~~ serialized user object }.\r\n\r\n// The deserializeUser method is used to retrieve the whole object from the session. It should return the full object to be attached to the request as req.user.\r\n\r\n\r\npassport.serializeUser((user, done) => {\r\n    done(null, user.id);\r\n});\r\n\r\npassport.deserializeUser((id, done) => {\r\n    User.findById(id).then(user => {\r\n        done(null, user);\r\n    }).catch(err => {\r\n        done(err, null);\r\n    });\r\n});\r\n\r\n// Local stratagy\r\npassport.use(\r\n    new LocalStrategy(\r\n    { usernameField: \"username\" }, \r\n    (username, password, done) => {\r\n        User.findOne({ username: username })\r\n            .then(user => {\r\n                // Create a new user\r\n                if (!user) {\r\n                    const newUser = new User({ username, password });\r\n                    // Hash password before saving in database\r\n                    const hashedPassword = bcrypt.hashSync(newUser.password, saltRounds);\r\n\r\n                    if (hashedPassword) {\r\n                        // reasign to user password\r\n                        newUser.password = hashedPassword;\r\n\r\n                        newUser.save().then(user => {\r\n                            return done(null, user);\r\n                        }).catch(err => {\r\n                            return done(null, false, { message: err });\r\n                        });\r\n                    }\r\n                } else {\r\n                    bcrypt.compare(password, user.hashPassword, (err, isMatch) => {\r\n                        if (err) {\r\n                            done(err, null)\r\n                        }\r\n\r\n                        if (isMatch) {\r\n                            return done(null, user);\r\n                        } else {\r\n                            return done(null, false, { message: \"Password was incorrect.\" })\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n            .catch(err => {\r\n                return done(null, false, { message: err });\r\n            });\r\n    }\r\n    )\r\n);\r\n\r\nmodule.exports = passport;"],"file":"passport.dev.js"}